
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.*;
import java.util.logging.Logger;

public class Main {
    private static final Logger logger = Logger.getLogger(Main.class.getName());
    private static final int NUM_ACCOUNTS = 4;
    private static final int NUM_THREADS = 2;
    private static final int MAX_TRANSACTIONS = 30;
    private static final int MIN_SLEEP_TIME = 1000;
    private static final int MAX_SLEEP_TIME = 2000;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        List<Account> accounts = new ArrayList<>();
        for (int i = 0; i < NUM_ACCOUNTS; i++) {
            accounts.add(new Account("Account " + (i + 1), 10000));
        }

        Random random = new Random();
        ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);
        List<Future<Boolean>> futures = new ArrayList<>();
        int transactions = 0;

        while (transactions < MAX_TRANSACTIONS) {
            Account from = accounts.get(random.nextInt(NUM_ACCOUNTS));
            Account to = accounts.get(random.nextInt(NUM_ACCOUNTS));
            if (from != to) {
                futures.add(executor.submit(new TransferTask(from, to, random)));
                transactions++;
            }
            if (futures.size() >= NUM_THREADS) {
                for (Future<Boolean> future : futures) {
                    try {
                        if (future.get()) {
                            logger.info("Transaction completed successfully");
                        } else {
                            logger.severe("Transaction failed");
                        }
                    } catch (Exception e) {
                        logger.severe("Error executing transaction" +  e);
                    }
                }
                futures.clear();
            }
            Thread.sleep(random.nextInt(MAX_SLEEP_TIME - MIN_SLEEP_TIME) + MIN_SLEEP_TIME);
        }

        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            logger.severe("Error shutting down executor" +  e);
        }

        logger.info("All transactions completed successfully");
    }
}
